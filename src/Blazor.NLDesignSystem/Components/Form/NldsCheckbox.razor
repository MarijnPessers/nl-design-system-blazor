@namespace Blazor.NLDesignSystem.Components
@{
    var counter = 0;
}

<fieldset class="input @(IsFilter ? "filter" : string.Empty) @(!IsValid ? "input--invalid" : "")">
    <CascadingValue Name="IsFilter" Value="@IsFilter">
        @Legend
    </CascadingValue>
    <CascadingValue Name="ElementIdentifier" Value="@Identifier">
        @Hint
        @if (!IsValid)
        {
            <NldsError>@((MarkupString)ErrorText)</NldsError>
        }
    </CascadingValue>
    @if (IsNested)
    {
        <ul @ref="CheckboxListReference" class="input__group-list">
            @foreach (var item in Items)
            {
                counter++;
                @*The id is a combination of the name and the value (since a html page can have multiple items with the same value, but should only have 1 for each name).*@
                <li class="input__group input__group--checkbox">
                    <input @key="@($"{Identifier}_{counter}")"
                           type="checkbox"
                           id="@($"{Identifier}_{counter}")"
                           class="input__control @InputControlType"
                           @onchange="@(() => { item.Toggle(); ItemsChanged.InvokeAsync(Items); })"
                           @onchange:preventDefault
                           disabled="@item.IsDisabled">
                    <label class="input__label input__label--checkbox" for="@($"{Identifier}_{counter}")">@((MarkupString)item.Description) @item.IsDisabled</label>
                    @if (item.HasSubItems)
                    {
                        var subCounter = 0;
                        <ul>
                            @foreach (var subItem in item.SubItems)
                            {
                                subCounter++;
                                <li>
                                    <input @key="@($"{Identifier}_{counter}_{subCounter}")"
                                           type="checkbox"
                                           id="@($"{Identifier}_{counter}_{subCounter}")"
                                           class="input__control @InputControlType"
                                           @onchange="@(() => { item.Toggle(); ItemsChanged.InvokeAsync(Items); })"
                                           @onchange:preventDefault
                                           disabled="@subItem.IsDisabled">
                                    <label class="input__label input__label--checkbox" for="@($"{Identifier}_{counter}_{subCounter}")">@((MarkupString)subItem.Description) @subItem.IsDisabled</label>
                                </li>
                            }
                        </ul>
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <div class="@ItemAlignmentStyle">
            @*When empty the wrapping div is not there in the example. But it makes no difference for the element*@
            @foreach (var item in Items)
            {
                counter++;
                @*The id is a combination of the name and the value (since a html page can have multiple items with the same value, but should only have 1 for each name).*@
                <div class="input__group input__group--checkbox @(IsFilter ? "input__group--compact" : string.Empty)">
                    <input @key="@($"{Identifier}_{counter}")"
                           type="checkbox"
                           name="@(Identifier)[]"
                           id="@($"{Identifier}_{counter}")"
                           class="input__control @InputControlType"
                           checked="@(item.IsChecked)"
                           @onchange="@(() => { item.IsChecked = !item.IsChecked; ItemsChanged.InvokeAsync(Items); })"
                           @onchange:preventDefault
                           disabled="@item.IsDisabled">
                    <label class="input__label input__label--checkbox" for="@($"{Identifier}_{counter}")">@((MarkupString)item.Description) @item.IsDisabled</label>
                </div>
            }
        </div>
    }
</fieldset>